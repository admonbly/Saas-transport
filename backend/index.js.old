const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const rateLimit = require('express-rate-limit');
const data = require('./data.json');

dotenv.config();
const User = require('./models/User');
const Booking = require('./models/Booking');
const Trip = require('./models/Trip');
const Vehicle = require('./models/Vehicle');
const Transaction = require('./models/Transaction');
const Financial = require('./models/Financials');
const Report = require('./models/Reports');
const TripManagement = require('./models/TripManagement');

app.use(cors());
app.use(express.json());

// Importation des routes
const authRoutes = require('./routes/auth');
const bookingRoutes = require('./routes/booking');
const fleetRoutes = require('./routes/fleet');
const financeRoutes = require('./routes/finance');


// Limiteur de taux
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limite chaque IP à 100 requêtes par fenêtre de 15 minutes
  message: 'Trop de requêtes, veuillez réessayer plus tard.'
});
app.use(limiter);

// Route pour la page d'accueil
app.get('/', (req, res) => {
  res.send('Bienvenue dans l’API de Transport');
});

// Routes pour les données existantes
app.get('/api/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

app.get('/api/bookings', async (req, res) => {
  const bookings = await Booking.find();
  res.json(bookings);
});

app.get('/api/trips', async (req, res) => {
  const trips = await Trip.find();
  res.json(trips);
});

app.get('/api/fleet', async (req, res) => {
  const fleet = await Vehicle.find();
  res.json(fleet);
});

app.get('/api/transactions', async (req, res) => {
  const transactions = await Transaction.find();
  res.json(transactions);
});

// Routes pour les nouveaux modèles
app.get('/api/financials', async (req, res) => {
  const financials = await Financial.find();
  res.json(financials);
});

app.get('/api/reports', async (req, res) => {
  const reports = await Report.find();
  res.json(reports);
});

app.get('/api/trip-management', async (req, res) => {
  const tripManagement = await TripManagement.find();
  res.json(tripManagement);
});

// Middleware de gestion des erreurs
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({ message: 'Erreur interne du serveur' });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));